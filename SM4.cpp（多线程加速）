#include "SM4.h"
#include<iostream>
#include<thread>
#include <windows.h>
#include <cstdlib> 
#include <ctime>
#include<vector>
using namespace std;
#define N 4096
class TimeCounter {
public:
	TimeCounter(void) {
		QueryPerformanceFrequency(&CPUClock);
	}
	double timeInterval;
private:
	LARGE_INTEGER startTime, endTime, CPUClock;

public:
	void start() {
		QueryPerformanceCounter(&startTime);
	}
	void end() {
		QueryPerformanceCounter(&endTime);
		timeInterval = 1e3 * ((double)endTime.QuadPart - (double)startTime.QuadPart) / (double)CPUClock.QuadPart;
		//ms
	}
};
void random_char_generator(unsigned char str[16]) {
	unsigned char r = 0, l = 255;
	srand(time(0));
	for (int i = 0; i < 16; i++) {
		str[i] = (rand() % (r - l + 1) + l);
	}
}
void init_set(unsigned char set[N][16]) {
	for (int i = 0; i < N; i += 4) {
		random_char_generator(set[i]);
		random_char_generator(set[i + 1]);
		random_char_generator(set[i + 2]);
		random_char_generator(set[i + 3]);
	}
}
void SM4_Enc_256(unsigned char key_set[N][16], unsigned char plain_set[N][16], unsigned char cipher_set[N][16], int index) {
	int end = index + N / 16;
	for (int i = index; i < end; i += 4) {
		SM4_Encrypt(key_set[i], plain_set[i], cipher_set[i]);
		SM4_Encrypt(key_set[i + 1], plain_set[i + 1], cipher_set[i + 1]);
		SM4_Encrypt(key_set[i + 2], plain_set[i + 2], cipher_set[i + 2]);
		SM4_Encrypt(key_set[i + 3], plain_set[i + 3], cipher_set[i + 3]);
	}
}
void SM4_Dec_256(unsigned char key_set[N][16], unsigned char cipher_set[N][16], unsigned char plain_set[N][16], int index) {
	int end = index + N / 16;
	for (int i = index; i < end; i += 4) {
		SM4_Decrypt(key_set[i], cipher_set[i], plain_set[i]);
		SM4_Decrypt(key_set[i + 1], cipher_set[i + 1], plain_set[i + 1]);
		SM4_Decrypt(key_set[i + 2], cipher_set[i + 2], plain_set[i + 2]);
		SM4_Decrypt(key_set[i + 3], cipher_set[i + 3], plain_set[i + 3]);
	}
}
int main() {
	unsigned char key_set[N][16], plain_set[N][16], cipher_set[N][16];
	init_set(key_set); init_set(plain_set);
	TimeCounter Timer1, Timer2;
	int thread_num = std::thread::hardware_concurrency();
	vector<thread> pool(thread_num);
	Timer1.start();
	for (int i = 0; i < thread_num; i++) {
		pool[i] = std::move(thread(SM4_Enc_256, key_set, plain_set, cipher_set, i * N / 16));						  
	}
	for (int i = 0; i < thread_num; i++) {
		pool[i].join();
	}
	Timer1.end();
	cout << "Enc：" << Timer1.timeInterval << "ms" << endl;

	Timer2.start();
	for (int i = 0; i < thread_num; i++) {
		pool[i] = std::move(thread(SM4_Dec_256, key_set, cipher_set, plain_set, i * N / 16));
	}			   
	for (int i = 0; i < thread_num; i++) {
		pool[i].join();
	}
	Timer2.end();
	cout << "Dec：" << Timer2.timeInterval << "ms" << endl;
}
